#version 450 core

/*
 * Copyright (c) 2018-2020 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/
#extension GL_EXT_samplerless_texture_functions : enable

layout (UPDATE_FREQ_PER_FRAME, binding = 0)        uniform texture2D velocityTexture;
layout (UPDATE_FREQ_PER_FRAME, binding = 1, rg16f) uniform image2D   outputTexture;

layout(row_major, push_constant) uniform cbRootConstants_Block {
    vec2  tileSize;
    float kFactor;
    float sFactor;
} cbRootConstants;

vec2 vmax(vec2 v1, vec2 v2);

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main ()
{
    int k = int(cbRootConstants.kFactor);
    ivec2 tileStart = ivec2(gl_GlobalInvocationID.xy) * k;

    vec2 tileMaxVel = vec2(0.0, 0.0);
    for (int u = 0; u < k; ++u)
    {
        for (int v = 0; v < k; ++v)
        {	
            vec2 velSample = texelFetch(velocityTexture, tileStart + ivec2(v, u), 0).xy;
            tileMaxVel = vmax(tileMaxVel, velSample);
        }
    }

    imageStore(outputTexture, ivec2(gl_GlobalInvocationID.xy), vec4(tileMaxVel.xy, 0.0, 1.0));
}

vec2 vmax(vec2 v1, vec2 v2) 
{
    // We do not want to calc the len directly, so we can go with dot product (||v1||^2 [?] ||v2||^2)

    // if (dot(v1, v1) > dot(v2, v2))
    //     return v1;
    // else
    //     return v2;

    return mix(v2, v1, step(0, dot(v1, v1) - dot(v2, v2)));
}